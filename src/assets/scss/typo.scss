@import url('https://fonts.googleapis.com/css?family=Roboto');
@import url('https://fonts.googleapis.com/css?family=Oswald');
@import url('https://fonts.googleapis.com/css?family=PT+Sans');
@import url('https://fonts.googleapis.com/css?family=Dosis|Roboto:300,400');
@import url('https://fonts.googleapis.com/css?family=Raleway:700,500');
@import url('https://fonts.googleapis.com/icon?family=Material+Icons');

@mixin responsive-font($responsive, $min, $max: false, $fallback: false) {
  $responsive-unitless: $responsive / ($responsive - $responsive + 1);
  $dimension: if(unit($responsive) == 'vh', 'height', 'width');
  $min-breakpoint: $min / $responsive-unitless * 100;

  @media (max-#{$dimension}: #{$min-breakpoint}) {
    font-size: $min;
  }

  @if $max {
    $max-breakpoint: $max / $responsive-unitless * 100;

    @media (min-#{$dimension}: #{$max-breakpoint}) {
      font-size: $max;
    }
  }

  @if $fallback {
    font-size: $fallback;
  }

  font-size: $responsive;
}

@mixin mq(
  $from: false,
  $to: false,
  $and: false,
  $media-feature: width,
  $media-type: all,
  $bp: $breakpoints
) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';

  /* From: this breakpoint (inclusive)*/
  @if $from {
    @if type-of($from) == number {
      $min-width: $from;
    } @else {
      $min-width: map_get($bp, $from);
    }
  }

  /* Until: that breakpoint (exclusive)*/
  @if $to {
    @if type-of($to) == number {
      $max-width: $to;
    } @else {
      $negative: if($em-media-queries, 0.01em, 1px);
      $max-width: map_get($bp, $to) - $negative;
    }
  }

  @if $media-feature {
    @if $min-width != 0 {
      $media-query: '#{$media-query} and (min-#{$media-feature}: #{$min-width})';
    }
    @if $max-width != 0 {
      $media-query: '#{$media-query} and (max-#{$media-feature}: #{$max-width})';
    }
  }

  @if $and {
    $media-query: '#{$media-query} and #{$and}';
  }

  /* Remove unnecessary media query prefix 'all and '*/
  @if ($media-type == 'all' and $media-query != '') {
    $media-type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  @media #{$media-type + $media-query} {
    @content;
  }
}

@mixin font-set($size: false, $colour: false, $weight: false, $lh: false) {
  font-family: 'Roboto', Arial, sans-serif;
  @if $size {
    font-size: $size;
  }
  @if $colour {
    color: $colour;
  }
  @if $weight {
    font-weight: $weight;
  }
  @if $lh {
    line-height: $lh;
  }
}

$up: uppercase;
$mm: #044169;

* {
  @include responsive-font(2.5vw, 11px, 16px, 14px);
}
body {
  font-family: 'Roboto', Arial, sans-serif;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  @include font-set(1.5rem, $mm, 600, 1.15);
  margin: 0;
  padding: 0.5rem;
}

h1 {
  font-family: 'Dosis';
  font-size: 3rem;
  text-transform: uppercase;
  letter-spacing: 0.2rem;
  line-height: normal;
  text-decoration: underline;
}

h2 {
  font-family: 'Oswald', Arial, sans-serif;
  padding: 1rem 0.5rem;
  font-weight: 500;
  font-size: 1.8rem;
  line-height: 1.5;
  text-transform: uppercase;
  text-align: center;
}

h3 {
  text-transform: $up;
  padding: 1rem 0.5rem;
}

h4 {
  font-family: 'Railway', Arial, sans-serif;
  padding: 1rem;
  font-weight: 500;
  font-size: 3rem;
  line-height: 1.5;
  text-transform: uppercase;
  text-align: center;
}

h5 {
  font-family: 'Dosis';
  text-transform: uppercase;
  letter-spacing: 0.05rem;
  line-height: normal;
}

h6 {
  font-family: 'Dosis';
  text-transform: uppercase;
  letter-spacing: 0.1rem;
  line-height: normal;
}
